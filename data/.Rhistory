summary_match_df <- cbind(summary_match_df, sd_matched_control)
mean_unmatched_treated <- as.data.frame(colMeans(unmatched_treated))
summary_match_df <- cbind(summary_match_df, mean_unmatched_treated)
sd_unmatched_treated <- as.data.frame(colSds(as.matrix(unmatched_treated)))
summary_match_df <- cbind(summary_match_df, sd_unmatched_treated)
mean_unmatched_control <- as.data.frame(colMeans(unmatched_control))
summary_match_df <- cbind(summary_match_df, mean_unmatched_control)
sd_unmatched_control <- as.data.frame(colSds(as.matrix(unmatched_control)))
summary_match_df <- cbind(summary_match_df, sd_unmatched_control)
match_df_for_plots <- as.data.frame(summary_match_df) %>%
mutate(variable = row.names(summary_match_df)) %>%
dplyr::rename(mean_matched_treated = `colMeans(matched_treated)`,
sd_matched_treated = `colSds(as.matrix(matched_treated))`,
mean_matched_control = `colMeans(matched_control)`,
sd_matched_control = `colSds(as.matrix(matched_control))`,
mean_unmatched_treated = `colMeans(unmatched_treated)`,
sd_unmatched_treated = `colSds(as.matrix(unmatched_treated))`,
mean_unmatched_control = `colMeans(unmatched_control)`,
sd_unmatched_control = `colSds(as.matrix(unmatched_control))`)
remove(summary_match_df, sd_matched_control, sd_matched_treated, sd_unmatched_control, sd_unmatched_treated,
mean_matched_control, mean_unmatched_control, mean_unmatched_treated, matched_control, matched_treated,
unmatched_control, unmatched_treated)
match_df_for_plots_2 <- match_df_for_plots %>%
select(mean_matched_treated, mean_matched_control,
mean_unmatched_treated, mean_unmatched_control, variable)
match_df_for_plots_2$difference_matched <- match_df_for_plots_2$mean_matched_treated - match_df_for_plots_2$mean_matched_control
match_df_for_plots_2$difference_unmatched <- match_df_for_plots_2$mean_unmatched_treated - match_df_for_plots_2$mean_unmatched_control
match_df_for_plots_2 <- match_df_for_plots_2 %>%
select(variable, difference_matched, difference_unmatched)
ggplot(match_df_for_plots_2) +
geom_point(aes(x = variable, y = difference_matched), color = '#e66101', size = 2) +
geom_point(aes(x = variable, y = difference_unmatched), color = '#5e3c99', size = 2) +
coord_flip() +
labs(title = "Difference in averages for regression variables in matched and unmatched sets",
subtitle = "Matched in orange, unmatched in blue") +
xlab("") +
ylab("Average for blocks near schools - Average for blocks not near schools")
# Create a DF with paired matches
Paired_crime_index <- cbind(dat_final2[row.names(matches_datfinal2$match.matrix),"log_crime_index"], dat_final2[matches_datfinal2$match.matrix,"log_crime_index"])
names(Paired_crime_index)[1] <- "Near_School"
names(Paired_crime_index)[2] <- "Not_Near_School"
Paired_crime_index$diff <- Paired_crime_index$Near_School - Paired_crime_index$Not_Near_School
ggplot(Paired_crime_index) +
geom_histogram(aes(diff), color = NA, fill = "#fec44f", bins = 200, alpha = .5) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1) +
labs(title = "Distribution of differences in pairs", subtitle = "Mean difference in red") +
xlab("") + ylab("")
ggplot(Paired_crime_index) +
geom_histogram(aes(exp(diff)), color = NA, fill = "#fec44f", bins = 200, alpha = .5) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1) +
labs(title = "Distribution of differences in pairs", subtitle = "Mean difference in red") +
xlab("") + ylab("")
ggplot(Paired_crime_index) +
geom_histogram(aes(diff), color = NA, fill = "#fec44f", bins = 200, alpha = .5) +
geom_density(aes(x = diff), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(diff)),
color="red", linetype="dashed", size=1) +
labs(title = "Distribution of differences in pairs", subtitle = "Mean difference in red") +
xlab("") + ylab("")
# Run a T-test
ttest_allcrime_nearschool <- t.test(Paired_crime_index$Near_School, Paired_crime_index$Not_Near_School, paired = TRUE)
ttest_allcrime_nearschool
ttest_allcrime_nearschool$estimate
# Create visualization of crime index variation
Paired_crime_index_melt <- melt(Paired_crime_index)
Paired_crime_index_melt <- Paired_crime_index_melt %>%
dplyr::rename(treated = variable, crime_index = value)
Paired_crime_index_melt$treatment <- if_else(Paired_crime_index_melt$treated == "Near_School", TRUE, FALSE)
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treatment)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#2c7fb8")) +
labs(title = "Log of Crime Index Density for matched pairs", fill = "Near School") +
xlab("Log of Crime per Area")+ylab("")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index)) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("")
View(Paired_crime_index_melt)
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treatment)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#2c7fb8")) +
labs(title = "Log of Crime Index Density for matched pairs", fill = "Near School") +
xlab("Log of Crime per Area")+ylab("")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index)) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("")
# Create visualization of crime index variation
Paired_crime_index_melt <- melt(Paired_crime_index)
Paired_crime_index_melt <- Paired_crime_index_melt %>%
dplyr::rename(treated = variable, crime_index = value)
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index)) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("")
summary(Paired_crime_index$Near_School)
summary(Paired_crime_index$Not_Near_School)
View(Paired_crime_index_melt)
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, color = as.factor(treated))) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated))) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .8) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs", fill = "") +
xlab("Log of Crime per Area")+ylab("")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .8) +
theme(legend. title = element_blank()) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs", fill = "") +
xlab("Log of Crime per Area")+ylab("")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .8) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs", fill = "") +
xlab("Log of Crime per Area")+ylab("")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .8) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs", fill = "") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.title = element_blank())
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .8) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs", fill = "") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend = element_blank())
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .8) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs", fill = "") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .8) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated, labeller = c("Near School", "Not Near School", "Difference")) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
# facet_wrap(Paired_crime_index_melt$treated,
#            labeller = c(Near"Near School", "Not Near School", "Difference")) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
# facet_wrap(Paired_crime_index_melt$treated,
#            labeller = c(Near"Near School", "Not Near School", "Difference")) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
# facet_wrap(Paired_crime_index_melt$treated,
#            labeller = c(Near"Near School", "Not Near School", "Difference")) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated,
labeller = c("Near_School" = "Near School", "Not_Near_School" = "Not Near School", "diff" = "Difference")) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
remove(final_model_backward_stepwise, match_df_for_plots, match_df_for_plots_2, matches_datfinal2,
Paired_crime_index, Paired_crime_index_melt)
remove(final_model_backward_stepwise, match_df_for_plots, match_df_for_plots_2, matches_datfinal2,
Paired_crime_index, Paired_crime_index_melt, df.match)
# Last version of regression using backwards stepwise method:
final_model_backward_stepwise <- lm(log(crime_index + 0.1) ~ log(family_in_pov + 0.1) +
pct_hisp +
pct_young_male +
avg_litter +
log(code_violation_index + 0.1) +
log(aband_vehicl_index + 0.1) +
log(dumping_index + 0.1) +
log(light_out_index + 0.1) +
log(graffiti_index + 0.1) +
log(infestation_index + 0.1) +
log(bad_street_index + 0.1) +
pct_civic +
pct_culture +
pct_comercial +
pct_industrial +
pct_residential +
pct_transport +
pct_vacant +
log(distance_cafe) +
log(distance_conv) +
log(distance_gym) +
log(distance_institution) +
log(distance_liquor) +
log(distance_lodge) +
log(distance_nightlife) +
log(distance_restaurant) +
log(distance_retail) +
near_school,
data = dat_final)
# Match observations from dataset, using a logistic regression that predicts blocks being near schools
set.seed(1234)
matches_datfinal2 <- matchit(near_school ~ log_family_pov +
pct_hisp +
pct_young_male +
avg_litter +
pct_civic +
pct_culture +
pct_comercial +
pct_industrial +
pct_residential +
pct_transport +
pct_vacant +
log_code_viola +
log_abandoned_car +
log_dumping +
log_lights +
log_graffiti +
log_infestation +
log_badstreet +
log_distcafe +
log_distconv +
log_distgym +
log_distinstitution +
log_distliquor +
log_distlodge +
log_distnight +
log_distrest +
log_distretail,
data = dat_final2, method="nearest", ratio=1)
summary(matches_datfinal2)
# Create visualization of difference between matched and unmatched data
df.match <- match.data(matches_datfinal2)[1:ncol(dat_final2)]
matched_treated <- filter(df.match, near_school == 1) %>%
select(log_family_pov, pct_hisp, pct_young_male, avg_litter, pct_civic, pct_culture, pct_comercial, pct_industrial,
pct_residential, pct_transport, pct_vacant, log_crime_index, log_code_viola, log_abandoned_car, log_dumping,
log_lights, log_graffiti, log_infestation, log_badstreet, log_distcafe, log_distconv, log_distgym,
log_distinstitution, log_distliquor, log_distlodge, log_distnight, log_distrest, log_distretail)
matched_control <- filter(df.match, near_school == 0) %>%
select(log_family_pov, pct_hisp, pct_young_male, avg_litter, pct_civic, pct_culture, pct_comercial, pct_industrial,
pct_residential, pct_transport, pct_vacant, log_crime_index, log_code_viola, log_abandoned_car, log_dumping,
log_lights, log_graffiti, log_infestation, log_badstreet, log_distcafe, log_distconv, log_distgym,
log_distinstitution, log_distliquor, log_distlodge, log_distnight, log_distrest, log_distretail)
unmatched_treated <- filter(dat_final2, near_school == 1) %>%
select(log_family_pov, pct_hisp, pct_young_male, avg_litter, pct_civic, pct_culture, pct_comercial, pct_industrial,
pct_residential, pct_transport, pct_vacant, log_crime_index, log_code_viola, log_abandoned_car, log_dumping,
log_lights, log_graffiti, log_infestation, log_badstreet, log_distcafe, log_distconv, log_distgym,
log_distinstitution, log_distliquor, log_distlodge, log_distnight, log_distrest, log_distretail)
unmatched_control <- filter(dat_final2, near_school == 0) %>%
select(log_family_pov, pct_hisp, pct_young_male, avg_litter, pct_civic, pct_culture, pct_comercial, pct_industrial,
pct_residential, pct_transport, pct_vacant, log_crime_index, log_code_viola, log_abandoned_car, log_dumping,
log_lights, log_graffiti, log_infestation, log_badstreet, log_distcafe, log_distconv, log_distgym,
log_distinstitution, log_distliquor, log_distlodge, log_distnight, log_distrest, log_distretail)
summary_match_df <- as.data.frame(colMeans(matched_treated))
sd_matched_treated <- as.data.frame(colSds(as.matrix(matched_treated)))
summary_match_df <- cbind(summary_match_df, sd_matched_treated)
mean_matched_control <- as.data.frame(colMeans(matched_control))
summary_match_df <- cbind(summary_match_df, mean_matched_control)
sd_matched_control <- as.data.frame(colSds(as.matrix(matched_control)))
summary_match_df <- cbind(summary_match_df, sd_matched_control)
mean_unmatched_treated <- as.data.frame(colMeans(unmatched_treated))
summary_match_df <- cbind(summary_match_df, mean_unmatched_treated)
sd_unmatched_treated <- as.data.frame(colSds(as.matrix(unmatched_treated)))
summary_match_df <- cbind(summary_match_df, sd_unmatched_treated)
mean_unmatched_control <- as.data.frame(colMeans(unmatched_control))
summary_match_df <- cbind(summary_match_df, mean_unmatched_control)
sd_unmatched_control <- as.data.frame(colSds(as.matrix(unmatched_control)))
summary_match_df <- cbind(summary_match_df, sd_unmatched_control)
match_df_for_plots <- as.data.frame(summary_match_df) %>%
mutate(variable = row.names(summary_match_df)) %>%
dplyr::rename(mean_matched_treated = `colMeans(matched_treated)`,
sd_matched_treated = `colSds(as.matrix(matched_treated))`,
mean_matched_control = `colMeans(matched_control)`,
sd_matched_control = `colSds(as.matrix(matched_control))`,
mean_unmatched_treated = `colMeans(unmatched_treated)`,
sd_unmatched_treated = `colSds(as.matrix(unmatched_treated))`,
mean_unmatched_control = `colMeans(unmatched_control)`,
sd_unmatched_control = `colSds(as.matrix(unmatched_control))`)
remove(summary_match_df, sd_matched_control, sd_matched_treated, sd_unmatched_control, sd_unmatched_treated,
mean_matched_control, mean_unmatched_control, mean_unmatched_treated, matched_control, matched_treated,
unmatched_control, unmatched_treated)
match_df_for_plots_2 <- match_df_for_plots %>%
select(mean_matched_treated, mean_matched_control,
mean_unmatched_treated, mean_unmatched_control, variable)
match_df_for_plots_2$difference_matched <- match_df_for_plots_2$mean_matched_treated - match_df_for_plots_2$mean_matched_control
match_df_for_plots_2$difference_unmatched <- match_df_for_plots_2$mean_unmatched_treated - match_df_for_plots_2$mean_unmatched_control
match_df_for_plots_2 <- match_df_for_plots_2 %>%
select(variable, difference_matched, difference_unmatched)
ggplot(match_df_for_plots_2) +
geom_point(aes(x = variable, y = difference_matched), color = '#e66101', size = 2) +
geom_point(aes(x = variable, y = difference_unmatched), color = '#5e3c99', size = 2) +
coord_flip() +
labs(title = "Difference in averages for regression variables in matched and unmatched sets",
subtitle = "Matched in orange, unmatched in blue") +
xlab("") +
ylab("Average for blocks near schools - Average for blocks not near schools")
# Create a DF with paired matches
Paired_crime_index <- cbind(dat_final2[row.names(matches_datfinal2$match.matrix),"log_crime_index"], dat_final2[matches_datfinal2$match.matrix,"log_crime_index"])
names(Paired_crime_index)[1] <- "Near_School"
names(Paired_crime_index)[2] <- "Not_Near_School"
Paired_crime_index$Difference <- Paired_crime_index$Near_School - Paired_crime_index$Not_Near_School
ggplot(Paired_crime_index) +
geom_histogram(aes(Difference), color = NA, fill = "#fec44f", bins = 200, alpha = .5) +
geom_density(aes(x = Difference), alpha = .2, fill = "blue") +
geom_vline(aes(xintercept = mean(Difference)),
color="red", linetype="dashed", size=1) +
labs(title = "Distribution of differences in pairs", subtitle = "Mean difference in red") +
xlab("") + ylab("")
# Run a T-test
ttest_allcrime_nearschool <- t.test(Paired_crime_index$Near_School, Paired_crime_index$Not_Near_School, paired = TRUE)
ttest_allcrime_nearschool
ttest_allcrime_nearschool$estimate
# Create visualization of crime index variation
Paired_crime_index_melt <- melt(Paired_crime_index)
Paired_crime_index_melt <- Paired_crime_index_melt %>%
dplyr::rename(treated = variable, crime_index = value)
ggplot(Paired_crime_index_melt) +
geom_density(aes(x = crime_index, fill = as.factor(treated)), alpha = .5) +
scale_fill_manual(values = c("#edf8b1", "#7fcdbb", "#2c7fb8")) +
facet_wrap(Paired_crime_index_melt$treated) +
labs(title = "Log of Crime Index Density for matched pairs") +
xlab("Log of Crime per Area")+ylab("") +
theme(legend.position="none")
summary(Paired_crime_index$Near_School)
summary(Paired_crime_index$Not_Near_School)
install.packages("randNames")
library(randNames)
dat <- rand_names(n = 5, seed = NULL, gender = NULL, nationality = NULL, key = NULL)
dat <- rand_names(5)
View(dat)
dat <- rand_names(5, nationality = "US")
View(dat)
View(dat)
library(dplyr)
dat <- rand_names(87, nationality = "US") %>% dplyr::select(name.first, name.last)
View(dat)
dat$fake_name <- paste(dat$name.first, dat$name.last, sep = " ", collapse = NULL)
View(dat)
unique(dat$fake_name)
unique(dat$name.first)
unique(dat$name.last)
save.image("~/UPENN/Box Sync/4th_SEMESTER/PRACTICUM/musa_practicum/environments_model/environment_fake_names.RData")
log(0)
log(1)
log(10)
log(n)
exp(10)
log(-1)
log(100)
exp(4.60517)
library(randNames)
library(dplyr)
dat <- rand_names(87, nationality = "US") %>% dplyr::select(name.first, name.last)
dat$fake_name <- paste(dat$name.first, dat$name.last, sep = " ", collapse = NULL)
unique(dat$fake_name)
unique(dat$name.first)
unique(dat$name.last)
View(dat)
library(tidyverse)
library(sf)
library(leaflet)
library(stringr)
setwd("~/UPENN/Box Sync/4th_SEMESTER/Javascript/Harth_Leo_Javascript_Final/data")
holo <- read.csv("GVP_Volcano_List_Holocene.csv")
pleisto <- read.csv("GVP_Volcano_List_Pleistocene.csv")
s <- function (x) {summary(as.factor(x))}
s(holo$Country)
unique(holo$Country)
unique(pleisto$Country)
colnames(holo) == colnames(pleisto)
holo$Epoch <- "Holocene"
pleisto$Epoch <- "Pleistocene"
volcano <- rbind(holo, pleisto) %>%
rename(
Name = Volcano.Name,
Type = Primary.Volcano.Type,
Activity_evidence = Activity.Evidence,
Last_known_eruption = Last.Known.Eruption,
Elevation_meters = Elevation..m.,
Dominant_rock_type = Dominant.Rock.Type
)
unique(volcano$Country)
sum(is.na(volcano$Latitude))
sum(is.na(volcano$Longitude))
s(volcano$Type)
typeof(volcano$Type)
volcano$Type <- as.character(volcano$Type)
volcano$Type <- case_when(
volcano$Type == "Caldera(s)" ~ "Caldera",
volcano$Type == "Complex(es)" ~ "Complex",
volcano$Type == "Cone(s)" ~ "Cone",
volcano$Type == "Explosion crater(s)" ~ "Explosion crater",
volcano$Type == "Fissure vent(s)" ~ "Fissure vent",
volcano$Type == "Lava cone(es)" ~ "Lava cone",
volcano$Type == "Lava cone(s)" ~ "Lava cone",
volcano$Type == "Lava dome(s)" ~ "Lava dome",
volcano$Type == "Maar(s)" ~ "Maar",
volcano$Type == "Pyroclastic cone(s)" ~ "Pyroclastic cone",
volcano$Type == "Shield(s)" ~ "Shield",
volcano$Type == "Stratovolcano(es)" ~ "Stratovolcano",
volcano$Type == "Stratovolcano?" ~ "Stratovolcano",
volcano$Type == "Submarine(es)" ~ "Submarine",
volcano$Type == "Tuff cone(s)" ~ "Tuff cone",
volcano$Type == "Tuff ring(s)" ~ "Tuff ring",
volcano$Type == "Caldera(?)" ~ "Caldera",
volcano$Type == "Explosion crater(?)" ~ "Explosion crater",
volcano$Type == "Fissure vent(s) ?" ~ "Fissure vent",
volcano$Type == "Lava dome(s) ?" ~ "Lava dome",
volcano$Type == "Shield?" ~ "Shield",
TRUE ~ volcano$Type
)
s(volcano$Last_known_eruption)
volcano$Last_known_eruption[is.na(volcano$Last_known_eruption)] <- "Unknown"
volcano$Last_known_eruption <- as.character(volcano$Last_known_eruption)
s(volcano$Activity_evidence)
volcano$Activity_evidence <- as.character(volcano$Activity_evidence)
volcano$Activity_evidence <- if_else(is.na(volcano$Activity_evidence), "No_information", volcano$Activity_evidence)
s(volcano$Region)
s(volcano$Subregion)
summary(volcano$Elevation_meters)
s(volcano$Dominant_rock_type)
typeof(volcano$Dominant_rock_type)
volcano$Dominant_rock_type <- as.character(volcano$Dominant_rock_type)
volcano$Dominant_rock_type[volcano$Dominant_rock_type == "No Data (checked)"] <- "No_information"
volcano$Dominant_rock_type[is.na(volcano$Dominant_rock_type)] <- "No_information"
volcano$Dominant_rock_type[volcano$Dominant_rock_type == ""] <- "No_information"
str(volcano)
volcano$Name <- as.character(volcano$Name)
volcano$Country <- as.character(volcano$Country)
volcano$Region <- as.character(volcano$Region)
volcano$Subregion <- as.character(volcano$Subregion)
volcano$join_id <- row.names(volcano)
volcano_filtered <- filter(volcano, volcano$Last_known_eruption != "Unknown")
volcano_filtered$split_field <- str_split_fixed(volcano_filtered$Last_known_eruption, " ", 2)
volcano_filtered$Era_last_eruption <- volcano_filtered$split_field[, 2]
volcano_filtered$Year_last_eruption <- volcano_filtered$split_field[, 1]
volcano_filtered$Year_last_eruption <- as.double(volcano_filtered$Year_last_eruption)
volcano_filtered$Year_last_eruption <- if_else(volcano_filtered$Era_last_eruption == "BCE",
volcano_filtered$Year_last_eruption*-1,
volcano_filtered$Year_last_eruption)
summary(volcano_filtered$Year_last_eruption)
volcano_filtered <- volcano_filtered %>%
select(join_id, Year_last_eruption)
volcano <- left_join(volcano, volcano_filtered, by = "join_id")
remove(volcano_filtered, holo, pleisto)
volcano$Register_last_eruption <- if_else(volcano$Last_known_eruption == "Unknown", "No", "Yes")
s(volcano$Register_last_eruption)
colnames(volcano)
volcano <- volcano %>%
dplyr::select(-join_id, -Last_known_eruption)
summary(volcano$Elevation_meters)
unique(volcano$Dominant_rock_type)
unique(volcano$Type)
unique(volcano$Region)
s(volcano$Epoch)
summary(volcano$Year_last_eruption)
